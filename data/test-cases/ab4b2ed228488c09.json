{"uid":"ab4b2ed228488c09","name":"Send event with missing 'type' field","fullName":"test.test_api_event.TestApiEvent#test_post_missing_type","historyId":"3f4d1bdeb5be6511610fe780cfa784a8","time":{"start":1753989754394,"stop":1753989754399,"duration":5},"status":"failed","statusMessage":"AssertionError: ❗ Expected validation error for missing 'type', but got 200\nassert 200 >= 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <test_api_event.TestApiEvent object at 0x7f600816f340>\n\n    @allure.title(\"Send event with missing 'type' field\")\n    def test_post_missing_type(self):\n        payload = {\n            \"userId\": \"user-123\",\n            \"videoTime\": 12.0,\n            \"timestamp\": datetime.utcnow().isoformat() + \"Z\"\n        }\n    \n        response = requests.post(BASE_URL, json=payload)\n        logger.info(f\"Missing 'type' field - Status: {response.status_code}\")\n>       assert response.status_code >= 400, (\n            \"❗ Expected validation error for missing 'type', \"\n            f\"but got {response.status_code}\"\n        )\nE       AssertionError: ❗ Expected validation error for missing 'type', but got 200\nE       assert 200 >= 400\nE        +  where 200 = <Response [200]>.status_code\n\ntest/test_api_event.py:39: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"start_server","time":{"start":1753989754340,"stop":1753989754384,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"start_server::fin","time":{"start":1753989774626,"stop":1753989775288,"duration":662},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"POST /api/event"},{"name":"epic","value":"Backend API Validation"},{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_api_event"},{"name":"subSuite","value":"TestApiEvent"},{"name":"host","value":"pkrvmjbmru5nbw0"},{"name":"thread","value":"6186-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_api_event"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ab4b2ed228488c09.json","parameterValues":[]}